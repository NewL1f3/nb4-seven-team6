// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum BadgeType {
  LIKE_100
  PARTICIPATION_10
  RECORD_100
}

enum ExerciseType {
  run
  bike
  swim

  @@map("ExerciseType")
}

model Group {
  id                 Int      @id @default(autoincrement())
  ownerParticipantId Int?
  name               String
  description        String
  photoUrl           String?
  goalRep            Int
  discordWebhookUrl  String
  discordInviteUrl   String
  likeCount          Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  owner        Participant?  @relation("GroupOwner", fields: [ownerParticipantId], references: [id], onDelete: Restrict)
  participants Participant[]
  records      Record[]
  badges       Badge[]
  tags         Tag[]

  @@index([name])
}

model Participant {
  id        Int      @id @default(autoincrement())
  groupId   Int
  nickname  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  ownedGroup Group[]  @relation("GroupOwner")
  records    Record[]

  @@unique([groupId, nickname], name: "groupId_nickname")
  @@index([groupId])
}

model Tag {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  groups Group[]
}

model Badge {
  id     Int       @id @default(autoincrement())
  type   BadgeType @unique
  groups Group[]
}

model Record {
  id            Int          @id @default(autoincrement())
  groupId       Int
  participantId Int
  exercise      ExerciseType
  description   String?
  seconds       Int
  distanceKm    Float?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  group       Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  participant Participant   @relation(fields: [participantId], references: [id], onDelete: Cascade)
  photos      RecordPhoto[]

  @@index([groupId])
  @@index([participantId])
  @@index([exercise])
  @@map("records")
}

model RecordPhoto {
  id       Int    @id @default(autoincrement())
  recordId Int
  url      String

  record Record @relation(fields: [recordId], references: [id], onDelete: Cascade)

  @@index([recordId])
  @@map("record_photos")
}
